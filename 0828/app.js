// три модуля ниже за тебя уже любезно написали создатели NodeJS
var http = require('http');	// запрашиваем модуль web-сервера с которым будем работать через переменную http
var fs = require("fs");	// запрашиваем модуль файловой системы (чтобы рабоать с файлами)
var querystring = require('querystring');	// модуль обработки URL данных

// ф-ция которая будет принимать сообщения от браузера прользователся
// в двух параметрах(переменных):
// 1) req - request - запрос (запрос к серверу от браузера пользователя)
// 2) res - response - ответ (ответ нашей программы-сервера браузеру пользователя)
function accept(req, res)
{
	console.log(req.method, req.url);	// просто выводим диагностическое сообщение о пути по которому обратился пользователь

	if (req.method == "GET")	// если метод GET (как правило используется чтобы что-то получить с сервера)
	{
		if (req.url == "/index.html")	// например файл index.html
		{
			res.writeHead(200, {
				'Content-Type': 'text/html',
				'Cache-Control': 'no-cache'
			});	// говорим браузеру пользователся что код 200 - все в порядлке и два HTTP-заголовка: что данные отдаем в виде HTML и их не надо запоминать
			
			var index = fs.readFileSync("index.html");	// читаем (синхронно) файл index.html в переменную index
			
			res.end(index);	// отдаем браузеру содержимое файла index.html
			
			return; // выходим из ф-ции обработки запросов от браузера пользователся (чтобы дальнейший код ниже не сработал)
		}
	} // if get

	if (req.method == "POST")	// для метода POST (обычно используется при отправке данных на сервер)
	if (req.url == "/save")	// обрабатывает только когда данные идут на URL /save
	{
		console.log('POST');

		var body = '';	// эта переменная будет использоваться чтобы накапливать куски отправляемых пользователем данных (если их будет много, то ф-ция req.on('data') будет вызыватся несколько раз на каждый новый кусок данных)
		var counter=0;

		// ф-ция которая будет принимать куски данных
		req.on('data', function(data) {
			body += data;	// накапливаем части в переменной body
			counter++;
		 	console.log('Part: # ' + counter + ' ' + body.length);
		});

		// когда данные от пользователся придут в полном объеме - сработает эта ф-ция
		req.on('end', function() {
			console.log('Body: ' + body);

			var q = querystring.parse(body);	// с помощью модуля querystring парсим наши данные от пользователся
												// они будут в виде объекта JSON
			console.log(q.person, q.amount);

			var save_data = q.person + "\t" + q.amount + "\n";	// формируем строчку для дальнейшего сохранения в файл...

			// ф-ция сохранения (дописывания) в файл
			// у нее три параметра:
			// 1) имя файла
			// 2) данные для сохранения
			// 3) ф-ция которая сработает после записи даннных
			fs.appendFile('ZP.txt', save_data, function (err) {
				if (err) throw err;	// err - это параметр который если не равен нулю - значит произошла ошибка - в случае ошибки будет прекращена работа программы и выведено отладочное сообщение о деталях ошибки (throw)
				console.log('Updated!');
			});

			var file_data = fs.readFileSync("ZP.txt");	// читаем (синхронно) файл ZP.txt в переменную file_data

			res.writeHead(200, {'Content-Type': 'text/plain; charset=utf-8'})
		 	res.end(file_data);	// возвращаем пользователю содержимое файла, где мы накапливаем данные которые он нам наприсылал
		});

		return;
	}
	
	res.writeHead(200, {
		'Content-Type': 'text/plain',
		'Cache-Control': 'no-cache'
	});

	res.end("OK");
}

http.createServer(accept).listen(8080);	// через объект http создаем WEB-сервер с ф-цией accept для обработки запросов от браузера пользователся и сервер будет висеть(работать) на порту 8080 (т.е. чтобы им воспользоваться надо будет в браузере зайти на адрес: http://localhost:8080/)
